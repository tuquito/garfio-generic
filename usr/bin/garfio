#!/bin/bash

#  Garfio es una aplicación para generar livecd/dvd instalables de tu distribución personalizada y copias de respaldo del directorio HOME
#
#  Copyright (C) 2010
#  Autor: Mario Colque <mario@tuquito.org.ar>
#  Tuquito Team! - www.tuquito.org.ar - www.garfio.org.ar
#

export TEXTDOMAIN="garfio"
export TEXTDOMAINDIR="/usr/share/tuquito/locale"
USER="$SUDO_USER"

. /usr/lib/tuquito/garfio/garfio.conf

if [ "$TMPDIR" = "" ]; then
	TMPDIR="/home/garfio"
else
	TMPDIR="$TMPDIR/garfio"
fi

if [ "$LIVEUSER" = "" ]; then
	LIVEUSER="garfio"
else
	LIVEUSER="`echo $LIVEUSER | awk '{print tolower ($0)}'`"
fi

if [ "$LIVECDLABEL" = "" ]; then
	LIVECDLABEL="Garfio Live"
fi

if [ "$CUSTOMISO" = "" ]; then
	CUSTOMISO="garfio-$1.iso"
fi

error() {
	echo -e $(gettext "Usage")":\n"
	echo -e "   sudo garfio dist|back|backh|clean|stop|trans\n"
	echo -e "Ejemplos:\n"
	echo -e "   sudo garfio back    ("$(gettext "To make a complete backup of your system. Including the home directory")")\n"
	echo -e "   sudo garfio backh   ("$(gettext "To make a complete backup of the user's home directory. May or may not include hidden files")")\n"
	echo -e "   sudo garfio clean   ("$(gettext "To clean temporary files from Garfio")")\n"
	echo -e "   sudo garfio dist    ("$(gettext "To make a distribution based on your system. Excluding the home directory")")\n"
	echo -e "   sudo garfio stop    ("$(gettext "Stops all processes launched")")\n"
	echo -e "   sudo garfio trans garfio.iso es  ("$(gettext "Locate your iso")")\n"
	exit 1
}

finish() {
	echo -e "* "$(gettext "Generating")" $1.md5\n"

	MD5=`md5sum $1`
	MD5T=`echo $MD5 | awk -F " " '{print $1}'`
	TAM=`du -sh $1 | cut -f1`

	chmod 777 $1

	clear

	echo $MD5 > $1.md5
	echo $(gettext "Directory")": $1" > /tmp/finish-garfio
	echo $(gettext "Size")": $TAM" >> /tmp/finish-garfio
	echo "MD5: $MD5T" >> /tmp/finish-garfio
	cat /tmp/finish-garfio
	echo $(gettext "Finished successfully")" -  `date +"%a %d.%m.%Y  %H:%M:%S"`" >>$TMPDIR/garfio.log
	gnotify "$(gettext 'Finished successfully')"
	if [ -f /usr/bin/aplay ]; then
		/usr/bin/aplay -q /usr/lib/tuquito/garfio/done.wav &
	fi
	exit 0
}

gnotify() {
	su $USER -c "notify-send 'Garfio' '$1' -i /usr/lib/tuquito/garfio/logo.png"
}

clean() {
	rm -rf $TMPDIR/TMP
	rm -rf /boot/tmp
	rm -rf /tmp/garfio*
	echo -e "* "$(gettext "Clean directory")"!"
	gnotify "$(gettext 'The temporary directory has been deleted')"
	exit 0
}

backupHome (){
	if [ ! -d $TMPDIR/backups ]; then
		mkdir -p $TMPDIR/backups
		chmod -R 777 $TMPDIR/backups
	fi

	cd $TMPDIR/backups

	echo -e "* "$(gettext "Preparing files")
	EXCLUDE="--exclude='*~' --exclude='.thumbnails' --exclude='.cache'"
	TIME=`date +"%d.%m.%y-%H%M"`

	if [ $NOHIDDEN = "YES" ]; then
		su $USER -c "tar -capPvf $USER-$TIME.garfio $EXCLUDE --lzma /home/$USER/*"
	else
		su $USER -c "tar -capPvf $USER-$TIME.garfio $EXCLUDE --lzma /home/$USER/"
	fi

	if [ -f $USER-$TIME.garfio ]; then
		echo -e "* "$(gettext "Backup generated")
		gnotify "$(gettext 'Backup generated in') $TMPDIR/backups/$USER-$TIME.garfio"
	else
		echo -e "* "$(gettext "Backup generated")
		gnotify "$(gettext 'Backup generated in') $TMPDIR/backups/$USER-$TIME.garfio"
	fi
	exit 0
}

restoreHome() {
	echo -e "* "$(gettext "Extracting files")
	cp $2 /tmp/grestore.tar.lzma

	if [ "$3" = "True" ]; then
		tar xvf /tmp/grestore.tar.lzma --overwrite -C /
	else
		tar kxvf /tmp/grestore.tar.lzma -C /
	fi

	touch /tmp/finish-garfio

	echo -e "* "$(gettext "Your home directory has been restored")
	gnotify "$(gettext 'Your home directory has been restored')"
	exit 0
}

translate() {
	BASEDIR="/tmp/garfio"
	REMASTERDIR="$BASEDIR/remaster"
	ROOTDIR="$BASEDIR/root"
	INITRDDIR="$BASEDIR/initrd"
	MOUNTDIR="/tmp/garfio-cdrom"
	SQUASHMOUNTDIR="/tmp/garfio-squash"

	ISO="$1"
	NEWLANG="$2"
	NEWISO="`echo $ISO | awk -F ".iso" '{print $1}'`-$NEWLANG.iso"

	# Limpiando directorios
	rm -rf $BASEDIR
	umount $MOUNTDIR
	rm -rf $MOUNTDIR
	umount $SQUASHMOUNTDIR
	rm -rf $SQUASHMOUNTDIR

	mkdir -p $BASEDIR/{remaster,root,initrd}
	mkdir -p $MOUNTDIR
	mkdir -p $SQUASHMOUNTDIR

	echo -e "* "$(gettext "Extracting ISO file")
	mount -o loop $ISO $MOUNTDIR

	echo -e "* "$(gettext "Copying files")
	rsync -at $MOUNTDIR/ $REMASTERDIR

	echo -e "* "$(gettext "Descompressing filesystem")
	mount -t squashfs -o loop $MOUNTDIR/casper/filesystem.squashfs $SQUASHMOUNTDIR
	rsync -at $SQUASHMOUNTDIR/ $ROOTDIR
	umount --force $SQUASHMOUNTDIR
	chmod 6755 $ROOTDIR/usr/bin/sudo
	chmod 0440 $ROOTDIR/etc/sudoers

	umount --force $MOUNTDIR

	echo -e "* "$(gettext "Localizing system")
	cp -f /etc/resolv.conf $ROOTDIR/etc/resolv.conf
	mount --bind /proc $ROOTDIR/proc
	mv -f $ROOTDIR/etc/wgetrc $ROOTDIR/etc/wgetrc.orig
	cp -f /etc/wgetrc $ROOTDIR/etc/wgetrc

	echo -e "* "$(gettext "Modifying liveCD menu")
	sed -e "s/initrd=/locale=$NEWLANG initrd=/g" $REMASTERDIR/isolinux/isolinux.cfg > /tmp/isolinux.cfg.garfio
	mv -f /tmp/isolinux.cfg.garfio $REMASTERDIR/isolinux/isolinux.cfg
	echo $NEWLANG > $REMASTERDIR/isolinux/lang

	echo -e "* "$(gettext "Installing Language packs")
	chroot $ROOTDIR /bin/sh -c "apt-get install --force-yes -y language-support-$NEWLANG language-pack-$NEWLANG language-pack-gnome-$NEWLANG-base language-pack-gnome-$NEWLANG && apt-get clean"
	mv -f $ROOTDIR/etc/wgetrc.orig $ROOTDIR/etc/wgetrc
	rm -rf $ROOTDIR/etc/resolv.conf
	umount --force $ROOTDIR/proc/

	echo -e "* "$(gettext "Compressing filesystem")
	chroot $ROOTDIR dpkg-query -W --showformat='${Package} ${Version}\n' > $REMASTERDIR/casper/filesystem.manifest
	cp $REMASTERDIR/casper/filesystem.manifest $REMASTERDIR/casper/filesystem.manifest-desktop
	if [ -f "$REMASTERDIR/casper/filesystem.squashfs" ]; then
		rm -Rf $REMASTERDIR/casper/filesystem.squashfs
	fi
	mksquashfs $ROOTDIR $REMASTERDIR/casper/filesystem.squashfs

	echo -e "* "$(gettext "Updating manifests")

	echo -e "* "$(gettext "Updating md5 sums")
	cd $REMASTERDIR
	rm md5sum.txt
	`find -type f -print0 | xargs -0 md5sum | grep -v isolinux/boot.cat | tee md5sum.txt`

	echo -e "* "$(gettext "Calculating the size of the file system for the installer.")
	`unsquashfs -lls casper/filesystem.squashfs | grep -v " inodes " | grep -v "unsquashfs:" | awk '{print $3}' | grep -v "," > /tmp/size.tmp`
	for i in `cat /tmp/size.tmp`; do a=$(($a+$i)); done
	echo $a > casper/filesystem.size

	if [ -f $NEWISO ]; then
		rm -rf $NEWISO
	fi

	echo -e "* "$(gettext "Building new ISO file")
	mkisofs -r -V "`lsb_release -sd`" -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o $NEWISO .

	finish $NEWISO
}

if [ "`whoami`" != "root" ]; then
	error
fi

echo -e $(gettext "Welcome to Garfio!\n")

case $1 in
	back)
		echo -e "* "$(gettext "Backup Mode")"\n"
	;;
	backh)
		echo -e "* "$(gettext "Backup Environment Mode")"\n"
		backupHome
	;;
	clean)
		echo -e "* "$(gettext "Cleaning directory")"..."
		clean
	;;
	dist)
		echo -e "* "$(gettext "Distribution Mode")"\n"
	;;
	rest)
		echo -e "* "$(gettext "Environment Restoration Mode")"\n"
		restoreHome $@
	;;
	stop)
		echo -e "* "$(gettext "Stopping processes")"..."
		killall rsync
		killall mksquashfs
		killall mkisofs
		killall genisoimage
		killall garfio
		exit 0
	;;
	trans)
		echo -e "* "$(gettext "Translation Mode")"\n"
		translate $2 $3
	;;
	*)
		error
	;;
esac

gnotify "$(gettext 'Generating ISO')"

main (){
	echo -e "* "$(gettext "Checking packages required")
	apt-get -y -qq purge popularity-contest
	apt-get -y -qq install casper live-initramfs user-setup discover1 xresprobe os-prober libdebian-installer4

	if [ "`cat /etc/X11/default-display-manager`" = "/usr/bin/gdm" ]; then
		apt-get -y -qq remove ubiquity-frontend-kde
		apt-get -y -qq install metacity ubiquity-frontend-gtk
	else
		apt-get -y -qq install ubiquity-frontend-kde
		apt-get -y -qq remove ubiquity-frontend-gtk
	fi

	if [ ! -f "/usr/share/ubiquity/apt-setup.saved" ]; then
		cp /usr/share/ubiquity/apt-setup /usr/share/ubiquity/apt-setup.saved
	fi

	sleep 1

	TMPISO="$TMPDIR"
	TMPDIR="$TMPDIR/TMP"
	echo -e "* "$(gettext "Checking if the temporary directory was created")

	if [ -d "$TMPDIR" ]; then
		rm -rf $TMPDIR
	fi

	mkdir -p $TMPDIR/iso/{.disk,casper,isolinux,preseed}
	mkdir -p $TMPDIR/system/{dev,etc,media/cdrom,mnt,proc,sys,tmp,var}
	chmod ug+rwx,o+rwt $TMPDIR/system/tmp

	#chown $SUDO_USER:$SUDO_USER $TMPDIR

	echo -e "* "$(gettext "Copying /var /etc directory and excluding temporary extra files")

	if [ "$EXCLUDES" != "" ]; then
		for exclude in $EXCLUDES; do
			VAREXCLUDES="$VAREXCLUDES --exclude='$exclude' "
		done
	fi

	rsync --exclude='*.log.*' --exclude='*.pid' --exclude='*.bak' --exclude='*.[0-9].gz' --exclude='*.deb' $VAREXCLUDES -a /var/. $TMPDIR/system/var/.
	rsync $VAREXCLUDES -a /etc/. $TMPDIR/system/etc/.

	rm -f $TMPDIR/system/etc/cups/ssl/server.crt
	rm -f $TMPDIR/system/etc/cups/ssl/server.key
	rm -f $TMPDIR/system/etc/fstab
	rm -f $TMPDIR/system/etc/hosts
	rm -f $TMPDIR/system/etc/hostname
	rm -f $TMPDIR/system/etc/mtab
	rm -f $TMPDIR/system/etc/resolv.conf
	rm -f $TMPDIR/system/etc/ssh/ssh_host_rsa_key
	rm -f $TMPDIR/system/etc/ssh/ssh_host_dsa_key.pub
	rm -f $TMPDIR/system/etc/ssh/ssh_host_dsa_key
	rm -f $TMPDIR/system/etc/ssh/ssh_host_rsa_key.pub
	rm -f $TMPDIR/system/etc/timezone
	rm -rf $TMPDIR/system/etc/udev/rules.d/70-persistent*
	rm -rf $TMPDIR/system/etc/X11/xorg.conf*
	rm -rf $TMPDIR/system/boot/grub
	#ls $TMPDIR/system/var/lib/apt/lists | grep -v ".gpg" | grep -v "lock" | grep -v "partial" | xargs -i rm $TMPDIR/system/var/lib/apt/lists/{} ;

	if [ "$1" = "dist" ]; then
		if [ -f $TMPDIR/system/etc/gdm/custom.conf ]; then
			rm -f $TMPDIR/system/etc/gdm/custom.conf
		fi
		if [ -f $TMPDIR/system/etc/kdm/custom.conf ]; then
			rm -f $TMPDIR/system/etc/kdm/custom.conf
		fi
		rm -f $TMPDIR/system/etc/default/locale
		rm -f $TMPDIR/system/etc/group
		rm -f $TMPDIR/system/etc/gshadow
		rm -f $TMPDIR/system/etc/gshadow-
		rm -f $TMPDIR/system/etc/passwd
		rm -f $TMPDIR/system/etc/shadow
		rm -f $TMPDIR/system/etc/shadow-

		find $TMPDIR/system/var/run $TMPDIR/system/var/log $TMPDIR/system/var/mail $TMPDIR/system/var/spool $TMPDIR/system/var/lock $TMPDIR/system/var/backups $TMPDIR/system/var/tmp $TMPDIR/system/var/www $TMPDIR/system/var/crash -type f -exec rm {} \;

		for i in dpkg.log lastlog mail.log syslog auth.log daemon.log faillog lpr.log mail.warn user.log boot debug mail.err messages wtmp bootstrap.log dmesg kern.log mail.info; do
			touch $TMPDIR/system/var/log/${i}
		done

		grep '^[^:]*:[^:]*:[5-9][0-9][0-9]:' /etc/passwd | awk -F ":" '{print "/usr/sbin/userdel -f",$1}'> $TMPDIR/cleantmpusers
		. $TMPDIR/cleantmpusers

		grep '^[^:]*:[^:]*:[0-9]:' /etc/passwd >> $TMPDIR/system/etc/passwd
		grep '^[^:]*:[^:]*:[0-9][0-9]:' /etc/passwd >> $TMPDIR/system/etc/passwd
		grep '^[^:]*:[^:]*:[0-9][0-9][0-9]:' /etc/passwd >> $TMPDIR/system/etc/passwd
		grep '^[^:]*:[^:]*:[3-9][0-9][0-9][0-9][0-9]:' /etc/passwd >> $TMPDIR/system/etc/passwd

		grep '^[^:]*:[^:]*:[0-9]:' /etc/group >> $TMPDIR/system/etc/group
		grep '^[^:]*:[^:]*:[0-9][0-9]:' /etc/group >> $TMPDIR/system/etc/group
		grep '^[^:]*:[^:]*:[0-9][0-9][0-9]:' /etc/group >> $TMPDIR/system/etc/group
		grep '^[^:]*:[^:]*:[3-9][0-9][0-9][0-9][0-9]:' /etc/group >> $TMPDIR/system/etc/group

		grep '^[^:]*:[^:]*:[5-9][0-9][0-9]:' /etc/passwd | awk -F ":" '{print $1}'> $TMPDIR/tmpusers1
		grep '^[^:]*:[^:]*:[1-9][0-9][0-9][0-9]:' /etc/passwd | awk -F ":" '{print $1}'> $TMPDIR/tmpusers2
		grep '^[^:]*:[^:]*:[1-2][0-9][0-9][0-9][0-9]:' /etc/passwd | awk -F ":" '{print $1}'> $TMPDIR/tmpusers3

		cat $TMPDIR/tmpusers1 $TMPDIR/tmpusers2 $TMPDIR/tmpusers3 > $TMPDIR/tmpusers

		cat $TMPDIR/tmpusers | while read LINE ;do
			echo $LINE | xargs -i sed -e 's/,{}//g' $TMPDIR/system/etc/group > $TMPDIR/system/etc/group.new1
			echo $LINE | xargs -i sed -e 's/{},//g' $TMPDIR/system/etc/group.new1 > $TMPDIR/system/etc/group.new2
			echo $LINE | xargs -i sed -e 's/{}//g' $TMPDIR/system/etc/group.new2 > $TMPDIR/system/etc/group
			rm -rf $TMPDIR/system/etc/group.new1 $TMPDIR/system/etc/group.new2
		done
	fi

	[ "$1" = "dist" ] && [ ! -d $TMPDIR/system/home ] && mkdir $TMPDIR/system/home
	[ "$1" = "dist" ] && chmod 755 /usr/share/initramfs-tools/scripts/casper-bottom/*adduser /usr/share/initramfs-tools/scripts/casper-bottom/*autologin
	[ "$1" = "back" ] && [ -d $TMPDIR/system/home ] && rm -rf $TMPDIR/system/home
	[ "$1" = "back" ] && chmod 644 /usr/share/initramfs-tools/scripts/casper-bottom/*adduser /usr/share/initramfs-tools/scripts/casper-bottom/*autologin

	DISTNAME=`lsb_release -si`
	cp /boot/memtest86+.bin $TMPDIR/iso/memtest
	cp /usr/lib/syslinux/isolinux.bin $TMPDIR/iso/isolinux/
	cp /usr/lib/syslinux/vesamenu.c32 $TMPDIR/iso/isolinux/
	cp -af /etc/garfio/isolinux/* $TMPDIR/iso/isolinux/
	cp -af /etc/garfio/preseed/* $TMPDIR/iso/preseed/

	MYLANG=`echo $LANG | awk -F "." '{print $1}'`
	sed -e "s/initrd=/locale=$MYLANG initrd=/g" $TMPDIR/iso/isolinux/isolinux.cfg > /tmp/isolinux.cfg.garfio
	mv -f /tmp/isolinux.cfg.garfio $TMPDIR/iso/isolinux/isolinux.cfg

	MYRELEASE=`lsb_release -sd`
	sed -e "s/_RELEASEVERSION_/$MYRELEASE/g" $TMPDIR/iso/isolinux/isolinux.cfg > /tmp/isolinux.cfg.garfio
	mv -f /tmp/isolinux.cfg.garfio $TMPDIR/iso/isolinux/isolinux.cfg

	sed -e "s/_RELEASE_/$DISTNAME/g" $TMPDIR/iso/isolinux/isolinux.cfg > /tmp/isolinux.cfg.garfio
	mv -f /tmp/isolinux.cfg.garfio $TMPDIR/iso/isolinux/isolinux.cfg

	ARCH=`archdetect | awk -F "/" '{print $1}'`
	cat > $TMPDIR/iso/README.diskdefines <<FOO
#define DISKNAME  $LIVECDLABEL
#define TYPE  binary
#define TYPEbinary  1
#define ARCH  $ARCH
#define ARCH$ARCH  1
#define DISKNUM  1
#define DISKNUM1  1
#define TOTALNUM  0
#define TOTALNUM0  1
FOO

	sleep 1

	echo -e "* "$(gettext "Generating filesystem.manifest and filesystem.manifest-desktop")
	dpkg-query -W --showformat='${Package} ${Version}\n' > $TMPDIR/iso/casper/filesystem.manifest
	cp $TMPDIR/iso/casper/filesystem.manifest $TMPDIR/iso/casper/filesystem.manifest-desktop
	REMOVE='ubiquity casper live-initramfs user-setup discover1 xresprobe os-prober libdebian-installer4'
	for i in $REMOVE; do
		sed -i "/${i}/d" $TMPDIR/iso/casper/filesystem.manifest-desktop
	done

	sleep 1

	if [ "$1" = "back" ]; then
		LIVEUSER="$USER"
	fi

	echo "# This file should go in /etc/casper.conf" > /etc/casper.conf
	echo "# Supported variables are:" >> /etc/casper.conf
	echo -e "# USERNAME, USERFULLNAME, HOST, BUILD_SYSTEM\n" >> /etc/casper.conf
	echo "export USERNAME=\"$LIVEUSER\"" >> /etc/casper.conf
	echo "export USERFULLNAME=\"$DISTNAME Live\"" >> /etc/casper.conf
	echo "export HOST=\"$LIVEUSER\"" >> /etc/casper.conf
	echo "export BUILD_SYSTEM=\"Ubuntu\"" >> /etc/casper.conf

	cp /etc/casper.conf $TMPDIR/system/etc/

	sleep 1

	if [ "$1" = "dist" ]; then
		if [ -f /usr/lib/ubiquity/user-setup/user-setup-apply.orig ]; then
			cp /usr/lib/ubiquity/user-setup/user-setup-apply.orig /usr/lib/ubiquity/user-setup/user-setup-apply
		fi
	else
		if [ ! -f /usr/lib/ubiquity/user-setup/user-setup-apply.orig ]; then
			mv /usr/lib/ubiquity/user-setup/user-setup-apply /usr/lib/ubiquity/user-setup/user-setup-apply.orig
		fi

		echo "exit 0"> /usr/lib/ubiquity/user-setup/user-setup-apply
		chmod 755 /usr/lib/ubiquity/user-setup/user-setup-apply

		if [ -d "/home/$USER/Escritorio" ]; then
			cp /usr/share/applications/ubiquity*.desktop /home/$USER/Escritorio/
		else
			cp /usr/share/applications/ubiquity*.desktop /home/$USER/Desktop/
		fi
	fi

	sleep 1

	echo -e "* "$(gettext "Configuring the casper and ubiquity options for the selected mode")

	rm -f /usr/share/ubiquity/apt-setup
	echo "#do nothing" > /usr/share/ubiquity/apt-setup
	chmod 755 /usr/share/ubiquity/apt-setup

	mkinitramfs -o /boot/initrd.img-`uname -r` `uname -r`

	echo -e "* "$(gettext "Compressing the initrd for the live CD")

	mkdir -p /boot/tmp/casper
	cp /boot/initrd.img-`uname -r` /boot/tmp/initrd.gz
	cd /boot/tmp/casper
	`gunzip -dc /boot/tmp/initrd.gz | cpio -imd --no-absolute-filenames`
	`find . | cpio --quiet --dereference -o -H newc | lzma -8 > /boot/tmp/initrd.lz`
	cd /

	echo -e "* "$(gettext "Copying the kernel and initrd for the live CD")

	cp /boot/vmlinuz-`uname -r` $TMPDIR/iso/casper/vmlinuz
	cp /boot/tmp/initrd.lz $TMPDIR/iso/casper/initrd.lz
	rm -rf /boot/tmp

	info1=`lsb_release -sd | awk -F " " '{print $1 " " $2}'`
	info2=`lsb_release -sd | awk -F " " '{print $3}'`
	info3="- Release $ARCH"
	info4=`date +"%Y%m%d"`
	infoall="$info1 \"$info2\" $info3 ($info4.1)"
	echo $infoall > $TMPDIR/iso/.disk/info
	echo "full_cd/single" > $TMPDIR/iso/.disk/cd_type
	echo "http://www.garfio.org.ar" > $TMPDIR/iso/.disk/release_notes_url
	touch $TMPDIR/iso/.disk/base_installable

	if [ -f $TMPDIR/garfio.log ]; then
		rm -f $TMPDIR/garfio.log
		touch $TMPDIR/garfio.log
	fi

	if [ -f $TMPDIR/iso/casper/filesystem.squashfs ]; then
		rm -f $TMPDIR/iso/casper/filesystem.squashfs
	fi

	echo -e "* "$(gettext "Generating filesystem.squashfs - This may take time, be patient...")
	echo -e "* 1) "$(gettext "Adding files and folders required by the live CD")

	SQUASHFSOPTSHIGH="-no-duplicates -no-recovery -always-use-fragments"

	mksquashfs $TMPDIR/system/ $TMPDIR/iso/casper/filesystem.squashfs $SQUASHFSOPTSHIGH 2>>$TMPDIR/garfio.log

	sleep 1

	echo -e "* 2) "$(gettext "Adding files and folders required by the cd for the selected mode")

	if [ "$1" = "back" ]; then
		mksquashfs / $TMPDIR/iso/casper/filesystem.squashfs $SQUASHFSOPTSHIGH -e \
		.thumbnails \
		.cache \
		.bash_history \
		Cache \
		boot/grub \
		dev \
		etc \
		media \
		mnt \
		proc \
		sys \
		tmp \
		var \
		$TMPDIR $EXCLUDES 2>>$TMPDIR/garfio.log
	else
		mksquashfs / $TMPDIR/iso/casper/filesystem.squashfs $SQUASHFSOPTSHIGH -e \
		.thumbnails \
		.cache \
		.bash_history \
		Cache \
		boot/grub \
		dev \
		etc \
		home \
		media \
		mnt \
		proc \
		sys \
		tmp \
		var \
		$TMPDIR $EXCLUDES 2>>$TMPDIR/garfio.log
	fi

	sleep 1

	if [ "$1" = "back" ]; then
		if [ -d "/home/$USER/Desktop" ]; then
			rm -f /home/$USER/Desktop/ubiquity*.desktop
		else
			rm -f /home/$USER/Escritorio/ubiquity*.desktop
		fi
	fi

	echo "-------------------------------------------------" >>$TMPDIR/garfio.log
	echo "Comandos ejecutados = $@" >>$TMPDIR/garfio.log
	echo "-------------------------------------------------" >>$TMPDIR/garfio.log
	echo "Información del monaje" >>$TMPDIR/garfio.log
	mount >>$TMPDIR/garfio.log
	echo "-------------------------------------------------" >>$TMPDIR/garfio.log
	echo "Información de los script de Casper" >>$TMPDIR/garfio.log
	ls -l /usr/share/initramfs-tools/scripts/casper-bottom/ >>$TMPDIR/garfio.log
	echo "-------------------------------------------------" >>$TMPDIR/garfio.log
	echo "Información de /etc/casper.conf" >>$TMPDIR/garfio.log
	cat /etc/casper.conf >>$TMPDIR/garfio.log
	echo "-------------------------------------------------" >>$TMPDIR/garfio.log
	echo "Información de /usr/lib/tuquito/garfio/garfio.conf" >>$TMPDIR/garfio.log
	cat /usr/lib/tuquito/garfio/garfio.conf >>$TMPDIR/garfio.log
	echo "-------------------------------------------------" >>$TMPDIR/garfio.log
	echo "Información de /etc/group" >>$TMPDIR/garfio.log
	cat $TMPDIR/system/etc/group >>$TMPDIR/garfio.log
	echo "-------------------------------------------------" >>$TMPDIR/garfio.log
	echo "Información de /etc/passwd" >>$TMPDIR/garfio.log
	cat $TMPDIR/system/etc/passwd >>$TMPDIR/garfio.log
	echo "-------------------------------------------------" >>$TMPDIR/garfio.log

	sleep 1

	SQUASHFSSIZE=`ls -s $TMPDIR/iso/casper/filesystem.squashfs | awk -F " " '{print $1}'`

	if [ "$SQUASHFSSIZE" -gt "3999999" ]; then
		echo -e "[X] "$(gettext "The compressed filesystem is larger than the iso9660 specification allows for a single file. You must try to reduce the amount of data you are backing up and try again.")
		echo "[X] "$(gettext "The compressed filesystem is larger than the iso9660 specification allows for a single file. You must try to reduce the amount of data you are backing up and try again.")>>$TMPDIR/garfio.log
		exit 1
	fi

	echo -e "* "$(gettext "Calculating the size of the file system for the installer.")
	echo $(gettext "Calculating the size of the file system for the installer.") >>$TMPDIR/garfio.log
	`unsquashfs -lls $TMPDIR/iso/casper/filesystem.squashfs | grep -v " inodes " | grep -v "unsquashfs:" | awk '{print $3}' | grep -v "," > /tmp/size.tmp`
	for i in `cat /tmp/size.tmp`; do a=$(($a+$i)); done
	echo $a > $TMPDIR/iso/casper/filesystem.size

	CREATEISO=`which mkisofs`

	if [ "$CREATEISO" = "" ]; then
		CREATEISO=`which genisoimage`
	fi

	echo -e "* "$(gettext "Generating md5sum.txt for cd/dvd")
	`cd $TMPDIR/iso && find . -type f -print0 | xargs -0 md5sum > md5sum.txt`

	sed -e '/isolinux/d' md5sum.txt > md5sum.txt.new
	sed -e '/md5sum/d' md5sum.txt.new > md5sum.txt
	rm -f md5sum.txt.new

	sleep 1

	echo -e "* "$(gettext "Generating")" $CUSTOMISO "$(gettext "in")" $TMPISO"

	$CREATEISO	\
	 -r	\
	 -V "$LIVECDLABEL"	\
	 -cache-inodes	\
	 -J	\
	 -l	\
	 -b isolinux/isolinux.bin	\
	 -c isolinux/boot.cat	\
	 -no-emul-boot	\
	 -boot-load-size 4	\
	 -boot-info-table	\
	 -o $TMPISO/$CUSTOMISO "$TMPDIR/iso" 2>>$TMPDIR/garfio.log 1>>$TMPDIR/garfio.log

	finish $TMPISO/$CUSTOMISO
}

main $@

